package com.simplilearn.kitchenStory.services;

import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.util.Pair;
import org.springframework.stereotype.Service;

import com.simplilearn.kitchenStory.entities.Cart;
import com.simplilearn.kitchenStory.entities.Product;
import com.simplilearn.kitchenStory.entities.ProductAndQty;
import com.simplilearn.kitchenStory.repositories.CartRepo;

@Service
public class CartServiceImpl {

	@Autowired
	Cart cart;

	@Autowired
	CartRepo cartRepo;
	
	@Autowired
	ProductServiceImpl productServiceImpl;
	@Autowired
	ProductAndQty productAndQtyServiceImpl;
	public Set<ProductAndQty> getAllProductsinCart() {
		return cart.getProductsAndQty();
	}

	public String deleteProductFromCart(long productId) {

		Set<ProductAndQty> productsAndQty1 = cart.getProductsAndQty().parallelStream()
				.map(productAndQty ->{
				if(productAndQty.getProduct().getId() == productId)
				{
					Product p= productServiceImpl.get(productId);
					p.setAvailableQty(p.getAvailableQty()+productAndQty.getQty());
					productAndQtyServiceImpl.d
					
					productServiceImpl.save(p);
				}
				return productAndQty;})
				.filter(productAndQty->productAndQty.getFirst().getId()!=productId)
				.collect(Collectors.toSet());
		cart.setProductsAndQty(productsAndQty1);
		cartRepo.save(cart);
		return "Product deleted with product id=" + productId;
	}

	public String deleteASingleProductQtyFromCart(long productId) {
		Set<Pair<Product, Long>> productsAndQty1 = cart.getProductsAndQty().parallelStream()
				.map(productAndQty ->{
				if(productAndQty.getFirst().getId() == productId)
				{
					productAndQty.getFirst().setAvailableQty(productAndQty.getFirst().getAvailableQty()+1);
					productServiceImpl.save(productAndQty.getFirst());
					productAndQty=Pair.of(productAndQty.getFirst(),productAndQty.getSecond()-1);
				}
				return productAndQty;})
				.collect(Collectors.toSet());
		cart.setProductsAndQty(productsAndQty1);
		cartRepo.save(cart);
		return "Product quantity removed with product id=" + productId;

	}

	public String addASingleProductQtyFromCart(long productId) {
		Set<Pair<Product, Long>> productsAndQty1 = cart.getProductsAndQty().parallelStream()
				.map(productAndQty ->{
				if(productAndQty.getFirst().getId() == productId)
				{
					productAndQty.getFirst().setAvailableQty(productAndQty.getFirst().getAvailableQty()-1);
					productServiceImpl.save(productAndQty.getFirst());
					productAndQty=Pair.of(productAndQty.getFirst(),productAndQty.getSecond()+1);
				}
				return productAndQty;})
				.collect(Collectors.toSet());
		cart.setProductsAndQty(productsAndQty1);
		cartRepo.save(cart);
		return "Single Product quantity added with product id=" + productId;

	}

	public Set<Pair<Product, Long>> OrderProducts(long productId)
	{
		
		Set<Pair<Product, Long>> ProductsAndQty=cart.getProductsAndQty();
		Product product=productServiceImpl.get(productId);
		product.setAvailableQty(product.getAvailableQty()-1);
		productServiceImpl.save(product);
		ProductsAndQty.add(Pair.of(product,1l));
		cart.setProductsAndQty(ProductsAndQty);
		cartRepo.save(cart);
		return getAllProductsinCart();
	}

}
